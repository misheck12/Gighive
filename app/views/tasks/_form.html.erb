<%= form_with(model: task, local: true, html: { class: 'needs-validation', novalidate: true, multipart: true }) do |form| %>
  <% if task.errors.any? %>
    <div id="error_explanation" class="alert alert-danger" role="alert">
      <h4 class="alert-heading"><%= pluralize(task.errors.count, "error") %> prohibited this task from being saved:</h4>
      <ul>
        <% task.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <!-- Removed the hidden client_id field for security reasons -->
  <!-- <%= form.hidden_field :client_id, value: current_user.id %> -->

  <div class="container mt-4">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <h1 class="text-center mb-4"><%= task.new_record? ? 'Create a New Task' : 'Edit Task' %></h1>

        <!-- Category Field -->
        <div class="mb-3">
          <%= form.label :category_id, 'Category', class: 'form-label' %>
          <%= form.select :category_id, options_from_collection_for_select(@categories, :id, :name, task.category_id), { prompt: 'Select a category' }, class: 'form-select', id: 'category_select' %>
        </div>

        <!-- Subcategory Field -->
        <div class="form-group mb-3">
          <%= form.label :subcategory_id, 'Subcategory', class: 'form-label' %>
          <%= form.select :subcategory_id, options_for_select([], selected: task.subcategory_id), prompt: 'Select a subcategory', id: 'subcategory_select', class: 'form-select' %>
        </div>

        <!-- Title Field -->
        <div class="form-group mb-3">
          <%= form.label :title, class: 'form-label' %>
          <%= form.text_field :title, class: 'form-control', placeholder: 'Enter a catchy title for your task', required: true %>
          <div class="invalid-feedback">
            Please provide a title.
          </div>
        </div>

        <!-- Description Field -->
        <div class="form-group mb-3">
          <%= form.label :description, class: 'form-label' %>
          <%= form.text_area :description, class: 'form-control', rows: 3, placeholder: 'What needs to be done?', required: true %>
          <div class="invalid-feedback">
            Please provide a description.
          </div>
        </div>

        <!-- Budget Field -->
        <div class="form-group mb-3">
          <%= form.label :budget, class: 'form-label' %>
          <%= form.number_field :budget, class: 'form-control', placeholder: 'Total budget for the task', required: true %>
          <div class="invalid-feedback">
            Please provide a budget.
          </div>
        </div>

        <!-- Deadline Field -->
        <div class="form-group mb-3">
          <%= form.label :deadline, class: 'form-label' %>
          <%= form.datetime_select :deadline, class: 'form-control', required: true %>
          <div class="invalid-feedback">
            Please provide a deadline.
          </div>
        </div>

        <!-- Attachment Field -->
        <div class="form-group mb-3">
          <%= form.label :attachment, class: 'form-label' %>
          <%= form.file_field :attachment, class: 'form-control-file', required: true %>
          <div class="invalid-feedback">
            Please attach a file.
          </div>
        </div>

        <!-- Submit Button -->
        <div class="actions text-center">
          <%= form.submit task.new_record? ? 'Create Task' : 'Update Task', class: 'btn btn-primary btn-block' %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const categorySelect = document.getElementById('category_select');
  const subcategorySelect = document.getElementById('subcategory_select');

  // Function to fetch and populate subcategories
  function fetchSubcategories(categoryId, selectedSubcategoryId = null) {
    // Clear existing subcategories
    subcategorySelect.innerHTML = '<option value="">Select a subcategory</option>';

    if (categoryId) {
      fetch(`/categories/${categoryId}/subcategories`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.subcategories && data.subcategories.length > 0) {
            data.subcategories.forEach(subcategory => {
              const option = document.createElement('option');
              option.value = subcategory.id;
              option.textContent = subcategory.name;
              if (selectedSubcategoryId && subcategory.id === selectedSubcategoryId) {
                option.selected = true;
              }
              subcategorySelect.appendChild(option);
            });
          } else {
            subcategorySelect.innerHTML = '<option value="">No subcategories available</option>';
          }
        })
        .catch(error => {
          console.error('Error fetching subcategories:', error);
          subcategorySelect.innerHTML = '<option value="">Error loading subcategories</option>';
        });
    }
  }

  // Event listener for category selection
  categorySelect.addEventListener('change', function () {
    const categoryId = this.value;
    fetchSubcategories(categoryId);
  });

  // Pre-populate subcategories if editing an existing task
  <% if task.persisted? && task.subcategory_id.present? %>
    fetchSubcategories(<%= task.category_id %>, <%= task.subcategory_id %>);
  <% end %>
});
</script>