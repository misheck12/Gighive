<%= form_with(model: task, local: true, html: { class: 'needs-validation', novalidate: true, multipart: true }) do |form| %>
  <% if task.errors.any? %>
    <div id="error_explanation" class="alert alert-danger" role="alert">
      <h4 class="alert-heading"><%= pluralize(task.errors.count, "error") %> prohibited this task from being saved:</h4>
      <ul>
        <% task.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <%= form.hidden_field :client_id, value: current_user.id %>

  <div class="container mt-4">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <h1 class="text-center mb-4">Create a New Task</h1>

        <!-- Category Field -->
        <div class="mb-3">
          <%= form.label :category, 'Category', class: 'form-label' %>
          <%= form.select :category, options_from_collection_for_select(@categories, :id, :name, @task.category), { prompt: 'Select a category' }, class: 'form-select', id: 'category_select' %>
        </div>

        <!-- Subcategory Field (Initially Empty) -->
        <div class="form-group">
          <%= form.label :subcategory, 'Subcategory' %>
          <%= form.select :subcategory, [], prompt: 'Select a subcategory', id: 'subcategory_select', class: 'form-control' %>
        </div>

        <div class="form-group">
          <%= form.label :title %>
          <%= form.text_field :title, class: 'form-control', placeholder: 'Enter a catchy title for your task', required: true %>
          <div class="invalid-feedback">
            Please provide a title.
          </div>
        </div>

        <div class="form-group">
          <%= form.label :description %>
          <%= form.text_area :description, class: 'form-control', rows: 3, placeholder: 'What needs to be done?', required: true %>
          <div class="invalid-feedback">
            Please provide a description.
          </div>
        </div>

        <div class="form-group">
          <%= form.label :budget %>
          <%= form.number_field :budget, class: 'form-control', placeholder: 'Total budget for the task', required: true %>
          <div class="invalid-feedback">
            Please provide a budget.
          </div>
        </div>

        <div class="form-group">
          <%= form.label :deadline %>
          <%= form.datetime_select :deadline, class: 'form-control', required: true %>
          <div class="invalid-feedback">
            Please provide a deadline.
          </div>
        </div>

        <div class="form-group">
          <%= form.label :attachment %>
          <%= form.file_field :attachment, class: 'form-control-file', required: true %>
          <div class="invalid-feedback">
            Please attach a file.
          </div>
        </div>

        <div class="actions">
          <%= form.submit 'Create Task', class: 'btn btn-primary btn-block' %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const categorySelect = document.getElementById('category_select');
    const subcategorySelect = document.getElementById('subcategory_select');

    // When category changes, fetch the subcategories
    categorySelect.addEventListener('change', function () {
      const categoryId = categorySelect.value;
      
      // Clear previous subcategories
      subcategorySelect.innerHTML = '<option value="">Select a subcategory</option>';

      if (categoryId) {
        // Fetch subcategories based on selected category
        fetch(`/categories/${categoryId}/subcategories`)
          .then(response => response.json())
          .then(data => {
            data.subcategories.forEach(subcategory => {
              const option = document.createElement('option');
              option.value = subcategory.id;
              option.textContent = subcategory.name;
              subcategorySelect.appendChild(option);
            });
          })
          .catch(error => {
            console.error('Error fetching subcategories:', error);
            subcategorySelect.innerHTML = '<option value="">Error loading subcategories</option>';
          });
      }
    });
  });
</script>